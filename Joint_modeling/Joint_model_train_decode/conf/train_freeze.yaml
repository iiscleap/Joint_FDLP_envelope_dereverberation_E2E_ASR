# network architecture
# encoder related
elayers: 12
eunits: 2048

# decoder related
dlayers: 6
dunits: 2048
# attention related
adim: 256
aheads: 4

# hybrid CTC/attention
mtlalpha: 0.3

# label smoothing
lsm-weight: 0.1

# minibatch related
batch-size: 32
maxlen-in: 512  # if input length  > maxlen-in, batchsize is automatically reduced
maxlen-out: 150 # if output length > maxlen-out, batchsize is automatically reduced

# optimization related
sortagrad: 0 # Feed samples from shortest to longest ; -1: enabled for all epochs, 0: disabled, other: enabled for 'other' epochs
opt: noam
accum-grad: 2
grad-clip: 5
patience: 2 
epochs: 100
dropout-rate: 0.1

# transformer specific setting
backend: pytorch
model-module: "espnet.nets.pytorch_backend.e2e_asr_transformer:E2E"
transformer-input-layer: conv2d     # encoder architecture type
transformer-lr: 10.0
transformer-warmup-steps: 25000
transformer-attn-dropout-rate: 0.0
transformer-length-normalized-loss: false
transformer-init: pytorch
# Take/initialise the model weights with the best model weight
enc-init: /home/rohitk/Workspace/E2E/espnet/egs/reverb/JT_ASR/exp/tr_simu_8ch_si284_pytorch_EXP0_BASE_MODEL/results/model.acc.best
enc-init-mods: 'encoder.'
dec-init: /home/rohitk/Workspace/E2E/espnet/egs/reverb/JT_ASR/exp/tr_simu_8ch_si284_pytorch_EXP0_BASE_MODEL/results/model.acc.best
dec-init-mods: 'decoder.'
# above one for freezing encoder and another for freezing decoder
freeze-mods: 'encoder.encoders., encoder.after_norm'
freeze-mods: 'decoder.'
# Report CER & WER
report-cer: true
report-wer: true

